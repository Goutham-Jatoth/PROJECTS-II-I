struct Book {
    int id;
    char title[100];
    char author[100];
    int quantity;
    int issued;
    struct Book *next;
};

struct Borrower {
    int bookId;
    char studentName[50];
    int issueDay, issueMonth, issueYear;
    struct Borrower *next;
};





#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <time.h>
#include <ctype.h>

#define FILE_NAME "library.dat"
#define FINE_PER_DAY 2   // fine in ₹ per day
#define ADMIN_USER "admin"
#define ADMIN_PASS "1234"

// ===============================
// Structure Definitions
// ===============================
struct Book {
    int id;
    char title[100];
    char author[100];
    int quantity;
    int issued;
    struct Book *next;
};

struct Borrower {
    int bookId;
    char studentName[50];
    int issueDay, issueMonth, issueYear;
    struct Borrower *next;
};

// ===============================
// Global Pointers
// ===============================
struct Book *library = NULL;
struct Borrower *borrowList = NULL;

// ===============================
// Function Declarations
// ===============================
int adminLogin();
void menu();
void addBook();
void displayBooks();
void searchBook();
void deleteBook();
void issueBook();
void returnBook();
void viewStatistics();
void saveData();
void loadData();
int countBooks();
void toLowerCase(char *);
int calculateFine(struct Borrower *);
int getCurrentDay();
int getCurrentMonth();
int getCurrentYear();

// ===============================
// Main Function
// ===============================
int main() {
    if (!adminLogin()) {
        printf("\n❌ Access Denied. Exiting...\n");
        return 0;
    }

    loadData();
    menu();
    saveData();

    printf("\n💾 Data saved successfully. Goodbye!\n");
    return 0;
}

// ===============================
// Admin Login Function
// ===============================
int adminLogin() {
    char username[20], password[20];
    printf("======================================\n");
    printf("     🔐 ADMIN LOGIN REQUIRED\n");
    printf("======================================\n");

    printf("Enter Username: ");
    scanf("%s", username);
    printf("Enter Password: ");
    scanf("%s", password);

    if (strcmp(username, ADMIN_USER) == 0 && strcmp(password, ADMIN_PASS) == 0) {
        printf("\n✅ Login Successful!\n");
        return 1;
    } else {
        printf("\n❌ Invalid credentials!\n");
        return 0;
    }
}

// ===============================
// Main Menu
// ===============================
void menu() {
    int choice;
    do {
        printf("\n=====================================\n");
        printf("   📚 SMART LIBRARY MANAGEMENT SYSTEM\n");
        printf("=====================================\n");
        printf("1. Add New Book\n");
        printf("2. Display All Books\n");
        printf("3. Search Book\n");
        printf("4. Delete Book\n");
        printf("5. Issue Book to Student\n");
        printf("6. Return Book\n");
        printf("7. View Statistics\n");
        printf("8. Save and Exit\n");
        printf("Enter your choice: ");
        scanf("%d", &choice);
        getchar();

        switch (choice) {
            case 1: addBook(); break;
            case 2: displayBooks(); break;
            case 3: searchBook(); break;
            case 4: deleteBook(); break;
            case 5: issueBook(); break;
            case 6: returnBook(); break;
            case 7: viewStatistics(); break;
            case 8: return;
            default: printf("Invalid choice. Try again.\n");
        }
    } while (1);
}

// ===============================
// Add New Book
// ===============================
void addBook() {
    struct Book *newBook = (struct Book *)malloc(sizeof(struct Book));

    printf("Enter Book ID: ");
    scanf("%d", &newBook->id);
    getchar();
    printf("Enter Title: ");
    fgets(newBook->title, 100, stdin);
    newBook->title[strcspn(newBook->title, "\n")] = '\0';
    printf("Enter Author: ");
    fgets(newBook->author, 100, stdin);
    newBook->author[strcspn(newBook->author, "\n")] = '\0';
    printf("Enter Quantity: ");
    scanf("%d", &newBook->quantity);

    newBook->issued = 0;
    newBook->next = library;
    library = newBook;

    printf("✅ Book added successfully!\n");
}

// ===============================
// Display Books
// ===============================
void displayBooks() {
    struct Book *temp = library;
    if (!temp) {
        printf("No books available.\n");
        return;
    }

    printf("\n%-5s %-30s %-20s %-10s %-10s\n", "ID", "Title", "Author", "Qty", "Issued");
    printf("--------------------------------------------------------------------------\n");
    while (temp) {
        printf("%-5d %-30s %-20s %-10d %-10d\n",
               temp->id, temp->title, temp->author, temp->quantity, temp->issued);
        temp = temp->next;
    }
}

// ===============================
// Search Book
// ===============================
void searchBook() {
    char keyword[100], keyLower[100];
    printf("Enter title or author to search: ");
    fgets(keyword, 100, stdin);
    keyword[strcspn(keyword, "\n")] = '\0';
    strcpy(keyLower, keyword);
    toLowerCase(keyLower);

    struct Book *temp = library;
    int found = 0;
    while (temp) {
        char titleLower[100], authorLower[100];
        strcpy(titleLower, temp->title);
        strcpy(authorLower, temp->author);
        toLowerCase(titleLower);
        toLowerCase(authorLower);

        if (strstr(titleLower, keyLower) || strstr(authorLower, keyLower)) {
            printf("📖 Found: ID %d | %s by %s (Qty: %d, Issued: %d)\n",
                   temp->id, temp->title, temp->author, temp->quantity, temp->issued);
            found = 1;
        }
        temp = temp->next;
    }
    if (!found)
        printf("❌ No book found matching '%s'\n", keyword);
}

// ===============================
// Delete Book
// ===============================
void deleteBook() {
    int id;
    printf("Enter Book ID to delete: ");
    scanf("%d", &id);

    struct Book *temp = library, *prev = NULL;
    while (temp && temp->id != id) {
        prev = temp;
        temp = temp->next;
    }

    if (!temp) {
        printf("Book not found.\n");
        return;
    }

    if (prev)
        prev->next = temp->next;
    else
        library = temp->next;

    free(temp);
    printf("✅ Book deleted successfully.\n");
}

// ===============================
// Issue Book
// ===============================
void issueBook() {
    int id;
    printf("Enter Book ID to issue: ");
    scanf("%d", &id);
    getchar();

    struct Book *temp = library;
    while (temp && temp->id != id)
        temp = temp->next;

    if (!temp) {
        printf("Book not found.\n");
        return;
    }

    if (temp->issued >= temp->quantity) {
        printf("❌ No copies available.\n");
        return;
    }

    struct Borrower *newB = (struct Borrower *)malloc(sizeof(struct Borrower));
    printf("Enter student name: ");
    fgets(newB->studentName, 50, stdin);
    newB->studentName[strcspn(newB->studentName, "\n")] = '\0';
    newB->bookId = id;

    time_t t = time(NULL);
    struct tm *tm_info = localtime(&t);
    newB->issueDay = tm_info->tm_mday;
    newB->issueMonth = tm_info->tm_mon + 1;
    newB->issueYear = tm_info->tm_year + 1900;

    newB->next = borrowList;
    borrowList = newB;

    temp->issued++;
    printf("✅ Book issued to %s on %d/%d/%d.\n", newB->studentName,
           newB->issueDay, newB->issueMonth, newB->issueYear);
}

// ===============================
// Return Book + Fine Calculation
// ===============================
void returnBook() {
    int id;
    char name[50];
    printf("Enter Book ID to return: ");
    scanf("%d", &id);
    getchar();
    printf("Enter student name: ");
    fgets(name, 50, stdin);
    name[strcspn(name, "\n")] = '\0';

    struct Borrower *temp = borrowList, *prev = NULL;
    while (temp && !(temp->bookId == id && strcmp(temp->studentName, name) == 0)) {
        prev = temp;
        temp = temp->next;
    }

    if (!temp) {
        printf("❌ No such borrow record found.\n");
        return;
    }

    int fine = calculateFine(temp);
    if (fine > 0)
        printf("⚠️ Book is returned late. Fine = ₹%d\n", fine);
    else
        printf("✅ Book returned on time. No fine.\n");

    if (prev)
        prev->next = temp->next;
    else
        borrowList = temp->next;
    free(temp);

    struct Book *b = library;
    while (b && b->id != id) b = b->next;
    if (b) b->issued--;
}

// ===============================
// Fine Calculation
// ===============================
int calculateFine(struct Borrower *br) {
    int currentDay = getCurrentDay();
    int currentMonth = getCurrentMonth();
    int currentYear = getCurrentYear();

    int issueDays = br->issueDay + br->issueMonth * 30 + br->issueYear * 365;
    int returnDays = currentDay + currentMonth * 30 + currentYear * 365;
    int diff = returnDays - issueDays;

    if (diff > 14)  // 14 days allowed
        return (diff - 14) * FINE_PER_DAY;
    else
        return 0;
}

// ===============================
// Statistics
// ===============================
void viewStatistics() {
    int totalBooks = countBooks();
    int totalIssued = 0;
    struct Book *temp = library;

    while (temp) {
        totalIssued += temp->issued;
        temp = temp->next;
    }

    printf("\n📊 LIBRARY STATISTICS\n");
    printf("------------------------------\n");
    printf("Total Titles: %d\n", totalBooks);
    printf("Total Books Issued: %d\n", totalIssued);
    printf("Total Available: %d\n", totalBooks - totalIssued);
}

// ===============================
// Save / Load Data
// ===============================
void saveData() {
    FILE *fp = fopen(FILE_NAME, "wb");
    if (!fp) return;
    struct Book *temp = library;
    while (temp) {
        fwrite(temp, sizeof(struct Book) - sizeof(struct Book *), 1, fp);
        temp = temp->next;
    }
    fclose(fp);
}

void loadData() {
    FILE *fp = fopen(FILE_NAME, "rb");
    if (!fp) return;

    struct Book temp;
    while (fread(&temp, sizeof(struct Book) - sizeof(struct Book *), 1, fp)) {
        struct Book *newBook = (struct Book *)malloc(sizeof(struct Book));
        *newBook = temp;
        newBook->next = library;
        library = newBook;
    }
    fclose(fp);
}

// ===============================
// Utility Functions
// ===============================
int countBooks() {
    int count = 0;
    struct Book *temp = library;
    while (temp) {
        count++;
        temp = temp->next;
    }
    return count;
}

void toLowerCase(char *s) {
    for (int i = 0; s[i]; i++)
        s[i] = tolower(s[i]);
}

int getCurrentDay() {
    time_t t = time(NULL);
    struct tm *tm_info = localtime(&t);
    return tm_info->tm_mday;
}
int getCurrentMonth() {
    time_t t = time(NULL);
    struct tm *tm_info = localtime(&t);
    return tm_info->tm_mon + 1;
}
int getCurrentYear() {
    time_t t = time(NULL);
    struct tm *tm_info = localtime(&t);
    return tm_info->tm_year + 1900;
}














🎯 Why This Version Stands Out
Category	Description
Academic Depth	Uses linked lists, structures, file I/O, time library, and authentication
Innovation	Fine system + Date tracking + Admin login
Code Quality	Modular, structured, and professional
Difficulty	Intermediate — perfect for 2nd/3rd semester projects
Practicality	Mimics a real library software






📘 LAB MANUAL / MINI PROJECT REPORT
Project Title: Smart Library Management System using C and Data Structures
🧩 1. Aim / Objective

To design and implement a Library Management System using the C language and Data Structures that performs operations like adding, searching, issuing, and returning books, including fine management and admin authentication.

🧠 2. Problem Definition

Libraries require efficient management of books, borrowers, and issue-return records. Manual systems are time-consuming and error-prone.
The objective of this project is to build a digital system that:

Stores book details dynamically.

Allows search, update, issue, and return operations.

Automatically calculates fines for late returns.

Uses Data Structures (Linked Lists) and File Handling for data persistence.

Provides secure access through an Admin Login.

⚙️ 3. Tools and Technologies Used
Component	Description
Language	C
Data Structures	Linked List
File Handling	Binary files (.dat)
Compiler	GCC / Turbo C
IDE	Code::Blocks / Dev C++ / VS Code
OS	Windows / Linux
🧩 4. Data Structures Used
a) Book Structure
struct Book {
    int id;
    char title[100];
    char author[100];
    int quantity;
    int issued;
    struct Book *next;
};

b) Borrower Structure
struct Borrower {
    int bookId;
    char studentName[50];
    int issueDay, issueMonth, issueYear;
    struct Borrower *next;
};

📊 5. UML Diagrams
a) Use Case Diagram
          +----------------+
          |    Admin       |
          +----------------+
             /     |     \
            /      |      \
      [Add Book] [Issue Book] [Return Book]
            \      |      /
             \     |     /
          [View Books / Statistics]


Actors:

Admin: Performs all operations like adding, deleting, searching, and issuing books.

Student: Issues or returns books through the admin interface.

b) Class Diagram (Equivalent Structure in C)
+---------------------+
|      Book           |
+---------------------+
| id : int            |
| title : string      |
| author : string     |
| quantity : int      |
| issued : int        |
| next : *Book        |
+---------------------+

+---------------------+
|     Borrower        |
+---------------------+
| bookId : int        |
| studentName : string|
| issueDay : int      |
| issueMonth : int    |
| issueYear : int     |
| next : *Borrower    |
+---------------------+

Relationships:
Book 1 --- * Borrower  (One book can be issued by many borrowers)

c) Activity Diagram
Start
   ↓
Admin Login
   ↓
[Correct?] --No--> Display "Access Denied"
   |
  Yes
   ↓
Display Menu
   ↓
Select Operation
   ↓
 ┌───────────────┬──────────────┬─────────────┬──────────────┐
 | Add Book      | Issue Book   | Return Book | View Stats   |
 └───────────────┴──────────────┴─────────────┴──────────────┘
   ↓
Perform Operation
   ↓
Save Data to File
   ↓
End

d) Sequence Diagram
Admin → System : Login(username, password)
System → Admin : Login success
Admin → System : AddBook() / IssueBook() / ReturnBook()
System → File : SaveData()
File → System : Acknowledge
System → Admin : Operation successful

📚 6. Algorithm (Example for Each Module)
a) Add Book Algorithm

Start

Accept book details (ID, Title, Author, Quantity)

Create a new book node

Insert it into the linked list

Save to file

Stop

b) Issue Book Algorithm

Start

Search the book by ID

If available:

Decrease quantity, increase issued count

Record issue date

Else show “Not Available”

Stop

c) Return Book Algorithm

Start

Locate borrow record

Calculate days difference using issue and current date

If days > 14, fine = (days – 14) × ₹2

Update book availability

Delete borrower record

Stop

⚙️ 7. Functional Modules
Module	Description
Add Book	Insert a new book into the system
Display Books	Show all stored books
Search Book	Search by ID, Title, or Author
Delete Book	Remove a book record
Issue Book	Issue a book and record borrower info
Return Book	Return a book and calculate fine
View Statistics	Show total books, issued count, etc.
Admin Login	Secure access with username & password
💾 8. File Handling

File Name: library.dat

Mode: Binary (wb, rb)

Data Stored: Book ID, Title, Author, Quantity, Issued count

Example File Format:

ID, Title, Author, Quantity, Issued
1, Let Us C, Yashwant Kanetkar, 5, 1

🧮 9. Sample Input / Output

Input:

Enter Username: admin
Enter Password: 1234
✅ Login Successful!
1. Add Book
2. Issue Book
Enter Book ID: 1
Enter Title: Let Us C
Enter Author: Yashwant Kanetkar
Enter Quantity: 3
✅ Book Added Successfully


Output:

ID   Title              Author            Qty   Issued
-------------------------------------------------------
1    Let Us C           Y. Kanetkar       3     1

📈 10. Result

The project successfully implements a Library Management System with:

Dynamic book handling using Linked Lists

Admin Authentication

Book Issue/Return with Fine System

Persistent Storage using Files
Thus, it fulfills all the objectives of efficient and secure library automation.

🧾 11. Conclusion

This project demonstrates the application of Data Structures (linked lists, structures) and File Handling in C for real-world problem solving.
It enhances data organization, ensures easy book tracking, and introduces automation features such as fines and authentication — making it a smart and reliable system for library operations.

💡 12. Future Enhancements

Implement a Graphical User Interface (GUI) using C/GTK.

Add multi-user roles (Admin, Librarian, Student).

Maintain transaction history logs.

Use Binary Search Trees (BSTs) for faster book searching.
