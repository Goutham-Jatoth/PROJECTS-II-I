🏦 Project Title: ATM Simulation System
🧠 Abstract

This ATM Simulator allows a user to:

🔐 Log in using a PIN

💰 Check account balance

➕ Deposit money

➖ Withdraw money

🚪 Logout

The project also simulates Admin Control, where the admin can:

👤 Add or remove users

🧾 View all user balances

This GUI version uses Java Swing and OOP concepts.

🧰 Technologies Used
Component	Technology
Programming Language	Java
GUI Framework	Swing
IDE Support	VS Code / IntelliJ / Eclipse
Architecture	Object-Oriented Design
📁 Project Structure
ATMSystem/
├── src/
│   ├── ATMMain.java
│   ├── ATMUser.java
│   ├── ATMOperations.java

💻 1. ATMUser.java

This class defines user details and basic data handling.

public class ATMUser {
    private String name;
    private String pin;
    private double balance;

    public ATMUser(String name, String pin, double balance) {
        this.name = name;
        this.pin = pin;
        this.balance = balance;
    }

    public String getName() { return name; }
    public String getPin() { return pin; }
    public double getBalance() { return balance; }

    public void deposit(double amount) {
        balance += amount;
    }

    public boolean withdraw(double amount) {
        if (amount <= balance) {
            balance -= amount;
            return true;
        }
        return false;
    }
}

💻 2. ATMOperations.java

This is the main ATM interface — GUI with deposit, withdraw, balance, and logout.

import javax.swing.*;
import java.awt.*;
import java.awt.event.*;

public class ATMOperations extends JFrame implements ActionListener {
    private ATMUser user;
    private JLabel welcomeLabel, balanceLabel;
    private JButton depositButton, withdrawButton, balanceButton, logoutButton;

    public ATMOperations(ATMUser user) {
        this.user = user;
        setTitle("ATM - Welcome " + user.getName());
        setSize(400, 300);
        setLayout(new GridLayout(6, 1, 10, 10));
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setLocationRelativeTo(null);

        welcomeLabel = new JLabel("Welcome, " + user.getName() + "!", SwingConstants.CENTER);
        balanceLabel = new JLabel("", SwingConstants.CENTER);

        depositButton = new JButton("Deposit");
        withdrawButton = new JButton("Withdraw");
        balanceButton = new JButton("Check Balance");
        logoutButton = new JButton("Logout");

        depositButton.addActionListener(this);
        withdrawButton.addActionListener(this);
        balanceButton.addActionListener(this);
        logoutButton.addActionListener(this);

        add(welcomeLabel);
        add(balanceButton);
        add(depositButton);
        add(withdrawButton);
        add(balanceLabel);
        add(logoutButton);
    }

    @Override
    public void actionPerformed(ActionEvent e) {
        if (e.getSource() == depositButton) {
            String amt = JOptionPane.showInputDialog(this, "Enter deposit amount:");
            if (amt != null && !amt.isEmpty()) {
                double amount = Double.parseDouble(amt);
                user.deposit(amount);
                JOptionPane.showMessageDialog(this, "₹" + amount + " deposited successfully!");
            }

        } else if (e.getSource() == withdrawButton) {
            String amt = JOptionPane.showInputDialog(this, "Enter withdrawal amount:");
            if (amt != null && !amt.isEmpty()) {
                double amount = Double.parseDouble(amt);
                if (user.withdraw(amount))
                    JOptionPane.showMessageDialog(this, "₹" + amount + " withdrawn successfully!");
                else
                    JOptionPane.showMessageDialog(this, "Insufficient balance!");
            }

        } else if (e.getSource() == balanceButton) {
            balanceLabel.setText("Current Balance: ₹" + user.getBalance());

        } else if (e.getSource() == logoutButton) {
            JOptionPane.showMessageDialog(this, "Logged out successfully!");
            dispose();
            new ATMMain(); // back to login
        }
    }
}

💻 3. ATMMain.java

This class handles login and acts as the entry point of the program.

import javax.swing.*;
import java.awt.*;
import java.awt.event.*;
import java.util.HashMap;

public class ATMMain extends JFrame implements ActionListener {
    private JTextField nameField;
    private JPasswordField pinField;
    private JButton loginButton, adminButton;
    private JLabel messageLabel;

    private HashMap<String, ATMUser> users = new HashMap<>();

    public ATMMain() {
        // Sample users
        users.put("1234", new ATMUser("Goutham", "1234", 5000.0));
        users.put("4321", new ATMUser("Ravi", "4321", 7000.0));

        setTitle("ATM Simulation System");
        setSize(400, 300);
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setLayout(new GridLayout(6, 1, 10, 10));
        setLocationRelativeTo(null);

        add(new JLabel("ATM Login", SwingConstants.CENTER));

        nameField = new JTextField();
        nameField.setHorizontalAlignment(JTextField.CENTER);
        nameField.setBorder(BorderFactory.createTitledBorder("Enter Name"));

        pinField = new JPasswordField();
        pinField.setHorizontalAlignment(JTextField.CENTER);
        pinField.setBorder(BorderFactory.createTitledBorder("Enter PIN"));

        loginButton = new JButton("Login");
        adminButton = new JButton("Admin Mode");
        messageLabel = new JLabel("", SwingConstants.CENTER);

        loginButton.addActionListener(this);
        adminButton.addActionListener(this);

        add(nameField);
        add(pinField);
        add(loginButton);
        add(adminButton);
        add(messageLabel);

        setVisible(true);
    }

    @Override
    public void actionPerformed(ActionEvent e) {
        if (e.getSource() == loginButton) {
            String name = nameField.getText().trim();
            String pin = new String(pinField.getPassword());

            if (users.containsKey(pin) && users.get(pin).getName().equalsIgnoreCase(name)) {
                messageLabel.setText("Login Successful!");
                dispose();
                new ATMOperations(users.get(pin)).setVisible(true);
            } else {
                messageLabel.setText("Invalid Name or PIN!");
            }

        } else if (e.getSource() == adminButton) {
            JOptionPane.showMessageDialog(this, 
                "Admin Mode:\n- Add/Remove Users (Feature in next version)");
        }
    }

    public static void main(String[] args) {
        SwingUtilities.invokeLater(() -> new ATMMain());
    }
}

🧩 Features

✅ User Login (Name + PIN)
✅ Deposit Money
✅ Withdraw Money (with balance validation)
✅ Check Balance
✅ Logout
✅ GUI Interface with Swing
✅ Admin button placeholder (future extension)

🏃 How to Run in VS Code

Open VS Code → Create folder ATMSystem

Inside it, create folder src

Add the three files inside src

ATMUser.java

ATMOperations.java

ATMMain.java

Open ATMMain.java

Run → Ctrl + F5

🧠 Concepts You’ll Learn

Object-Oriented Design (Encapsulation, Classes)

Swing GUI (JFrame, JButton, JLabel, JTextField)

Event Handling with ActionListener

Data Handling with HashMap (simulating database)

Input validation and user feedback with JOptionPane
