import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import java.awt.*;
import java.awt.event.*;
import java.sql.*;
import java.time.LocalDate;
import java.time.temporal.ChronoUnit;

/**
 * LibrarySystemWithLogin.java
 * - Swing GUI + JDBC (MySQL)
 * - Features: Admin login, Student registration/login, Add/View/Search Books,
 *   Issue books (issue_date, due_date), Return books (calculate fine), View issues.
 *
 * IMPORTANT:
 * - Update DB_URL, DB_USER, DB_PASS to match your MySQL settings.
 * - Ensure the DB & tables (see SQL above) exist.
 */
public class LibrarySystemWithLogin extends JFrame {
    // --- DB settings: change as needed ---
    private static final String DB_URL = "jdbc:mysql://localhost:3306/librarydb";
    private static final String DB_USER = "root";
    private static final String DB_PASS = "password";

    // Admin credentials (simple/hardcoded for this project)
    private static final String ADMIN_USER = "admin";
    private static final String ADMIN_PASS = "admin123";

    // Fine rate per overdue day
    private static final double FINE_PER_DAY = 5.0;

    private Connection conn;

    // CardLayout panels
    private CardLayout cards;
    private JPanel mainPanel;

    // Login components
    private JTextField loginUserField;
    private JPasswordField loginPassField;
    private JButton loginBtn, gotoRegisterBtn, adminLoginBtn;

    // Registration components
    private JTextField regNameField, regRollField;
    private JPasswordField regPassField;
    private JButton registerBtn, backToLoginBtn;

    // Shared book table
    private DefaultTableModel booksTableModel;
    private JTable booksTable;

    // Student dashboard
    private JLabel studentWelcomeLabel;
    private int currentStudentId = -1;
    private String currentStudentName = null;

    // Admin dashboard
    private JLabel adminWelcomeLabel;

    // Issue/Return tables
    private DefaultTableModel issuesTableModel;
    private JTable issuesTable;

    public LibrarySystemWithLogin() {
        setTitle("ðŸ“š Library System (Login + Issue/Return + Fine)");
        setSize(900, 600);
        setLocationRelativeTo(null);
        setDefaultCloseOperation(EXIT_ON_CLOSE);

        try {
            conn = DriverManager.getConnection(DB_URL, DB_USER, DB_PASS);
        } catch (SQLException ex) {
            showErrorAndExit("Database connection failed: " + ex.getMessage());
        }

        // Card layout
        cards = new CardLayout();
        mainPanel = new JPanel(cards);

        // Create views
        mainPanel.add(buildLoginPanel(), "login");
        mainPanel.add(buildRegisterPanel(), "register");
        mainPanel.add(buildStudentDashboard(), "studentDash");
        mainPanel.add(buildAdminDashboard(), "adminDash");

        add(mainPanel);
        cards.show(mainPanel, "login");
        setVisible(true);
    }

    // -------------------------
    // UI: Login panel
    // -------------------------
    private JPanel buildLoginPanel() {
        JPanel p = new JPanel(new BorderLayout(10, 10));
        JPanel center = new JPanel(new GridBagLayout());
        GridBagConstraints c = new GridBagConstraints();
        c.insets = new Insets(8, 8, 8, 8);
        c.gridx = 0; c.gridy = 0;

        JLabel title = new JLabel("Library System - Login");
        title.setFont(new Font("SansSerif", Font.BOLD, 20));
        p.add(title, BorderLayout.NORTH);

        center.add(new JLabel("Username (roll_no or admin):"), c);
        c.gridx = 1;
        loginUserField = new JTextField(20);
        center.add(loginUserField, c);

        c.gridx = 0; c.gridy++;
        center.add(new JLabel("Password:"), c);
        c.gridx = 1;
        loginPassField = new JPasswordField(20);
        center.add(loginPassField, c);

        c.gridx = 0; c.gridy++;
        loginBtn = new JButton("Login");
        center.add(loginBtn, c);
        loginBtn.addActionListener(e -> performLogin());

        c.gridx = 1;
        gotoRegisterBtn = new JButton("Register (Student)");
        center.add(gotoRegisterBtn, c);
        gotoRegisterBtn.addActionListener(e -> cards.show(mainPanel, "register"));

        c.gridx = 0; c.gridy++;
        adminLoginBtn = new JButton("Admin Login (popup)");
        center.add(adminLoginBtn, c);
        adminLoginBtn.addActionListener(e -> {
            // admin quick login using admin credentials fields
            loginUserField.setText(ADMIN_USER);
            loginPassField.setText(ADMIN_PASS);
        });

        p.add(center, BorderLayout.CENTER);
        return p;
    }

    // -------------------------
    // UI: Register panel
    // -------------------------
    private JPanel buildRegisterPanel() {
        JPanel p = new JPanel(new BorderLayout(10,10));
        JPanel center = new JPanel(new GridBagLayout());
        GridBagConstraints c = new GridBagConstraints();
        c.insets = new Insets(8,8,8,8);

        JLabel title = new JLabel("Student Registration");
        title.setFont(new Font("SansSerif", Font.BOLD, 18));
        p.add(title, BorderLayout.NORTH);

        c.gridx = 0; c.gridy = 0;
        center.add(new JLabel("Roll No:"), c);
        c.gridx = 1;
        regRollField = new JTextField(20);
        center.add(regRollField, c);

        c.gridx = 0; c.gridy++;
        center.add(new JLabel("Name:"), c);
        c.gridx = 1;
        regNameField = new JTextField(20);
        center.add(regNameField, c);

        c.gridx = 0; c.gridy++;
        center.add(new JLabel("Password:"), c);
        c.gridx = 1;
        regPassField = new JPasswordField(20);
        center.add(regPassField, c);

        c.gridx = 0; c.gridy++;
        registerBtn = new JButton("Register");
        center.add(registerBtn, c);
        registerBtn.addActionListener(e -> performRegistration());

        c.gridx = 1;
        backToLoginBtn = new JButton("Back to Login");
        center.add(backToLoginBtn, c);
        backToLoginBtn.addActionListener(e -> cards.show(mainPanel, "login"));

        p.add(center, BorderLayout.CENTER);
        return p;
    }

    // -------------------------
    // UI: Student Dashboard
    // -------------------------
    private JPanel buildStudentDashboard() {
        JPanel p = new JPanel(new BorderLayout(10,10));

        // Top: welcome + logout
        JPanel top = new JPanel(new BorderLayout());
        studentWelcomeLabel = new JLabel("Welcome, STUDENT");
        studentWelcomeLabel.setFont(new Font("SansSerif", Font.BOLD, 16));
        JButton logoutBtn = new JButton("Logout");
        logoutBtn.addActionListener(e -> {
            currentStudentId = -1;
            currentStudentName = null;
            loginUserField.setText("");
            loginPassField.setText("");
            cards.show(mainPanel, "login");
        });
        top.add(studentWelcomeLabel, BorderLayout.WEST);
        top.add(logoutBtn, BorderLayout.EAST);
        p.add(top, BorderLayout.NORTH);

        // Center: split - left books, right actions/issues
        JSplitPane split = new JSplitPane(JSplitPane.HORIZONTAL_SPLIT);
        split.setResizeWeight(0.6);

        // Left: Books table + search
        JPanel left = new JPanel(new BorderLayout(6,6));
        JPanel searchPanel = new JPanel();
        JTextField searchField = new JTextField(20);
        JButton searchBtn = new JButton("Search");
        JButton refreshBtn = new JButton("Refresh");
        searchPanel.add(new JLabel("Search Title:"));
        searchPanel.add(searchField);
        searchPanel.add(searchBtn);
        searchPanel.add(refreshBtn);
        left.add(searchPanel, BorderLayout.NORTH);

        booksTableModel = new DefaultTableModel(new Object[]{"ID","Title","Author","Status"}, 0);
        booksTable = new JTable(booksTableModel);
        left.add(new JScrollPane(booksTable), BorderLayout.CENTER);

        // Issue panel below
        JPanel leftBottom = new JPanel();
        JButton issueBtn = new JButton("Issue Selected Book");
        leftBottom.add(issueBtn);
        left.add(leftBottom, BorderLayout.SOUTH);

        // Right: student's issued books and return button
        JPanel right = new JPanel(new BorderLayout(6,6));
        issuesTableModel = new DefaultTableModel(new Object[]{"IssueID","Book Title","Issue Date","Due Date","Returned","Fine"}, 0);
        issuesTable = new JTable(issuesTableModel);
        right.add(new JLabel("Your Issued Books:"), BorderLayout.NORTH);
        right.add(new JScrollPane(issuesTable), BorderLayout.CENTER);

        JPanel rightBottom = new JPanel();
        JButton returnBtn = new JButton("Return Selected Issue");
        rightBottom.add(returnBtn);
        JButton viewMyIssuesBtn = new JButton("Refresh My Issues");
        rightBottom.add(viewMyIssuesBtn);
        right.add(rightBottom, BorderLayout.SOUTH);

        split.setLeftComponent(left);
        split.setRightComponent(right);
        p.add(split, BorderLayout.CENTER);

        // Action listeners
        refreshBtn.addActionListener(e -> loadBooks(""));
        searchBtn.addActionListener(e -> loadBooks(searchField.getText().trim()));
        issueBtn.addActionListener(e -> studentIssueSelectedBook());
        returnBtn.addActionListener(e -> studentReturnSelectedIssue());
        viewMyIssuesBtn.addActionListener(e -> loadStudentIssues());

        // load initial books
        loadBooks("");
        return p;
    }

    // -------------------------
    // UI: Admin Dashboard
    // -------------------------
    private JPanel buildAdminDashboard() {
        JPanel p = new JPanel(new BorderLayout(10,10));

        JPanel top = new JPanel(new BorderLayout());
        adminWelcomeLabel = new JLabel("Admin Dashboard");
        adminWelcomeLabel.setFont(new Font("SansSerif", Font.BOLD, 16));
        JButton logoutBtn = new JButton("Logout");
        logoutBtn.addActionListener(e -> cards.show(mainPanel, "login"));
        top.add(adminWelcomeLabel, BorderLayout.WEST);
        top.add(logoutBtn, BorderLayout.EAST);
        p.add(top, BorderLayout.NORTH);

        JPanel center = new JPanel(new BorderLayout(8,8));
        // Add book panel
        JPanel addPanel = new JPanel();
        JTextField titleField = new JTextField(20);
        JTextField authorField = new JTextField(15);
        JButton addBookBtn = new JButton("Add Book");
        addPanel.add(new JLabel("Title:")); addPanel.add(titleField);
        addPanel.add(new JLabel("Author:")); addPanel.add(authorField);
        addPanel.add(addBookBtn);

        center.add(addPanel, BorderLayout.NORTH);

        // Books table
        DefaultTableModel adminBooksModel = new DefaultTableModel(new Object[]{"ID","Title","Author","Status"}, 0);
        JTable adminBooksTable = new JTable(adminBooksModel);
        center.add(new JScrollPane(adminBooksTable), BorderLayout.CENTER);

        // Issue management below
        JPanel bottom = new JPanel();
        JButton viewAllBtn = new JButton("View All Books");
        JButton deleteBookBtn = new JButton("Delete Selected Book");
        JButton viewAllIssuesBtn = new JButton("View All Issues");
        bottom.add(viewAllBtn); bottom.add(deleteBookBtn); bottom.add(viewAllIssuesBtn);

        center.add(bottom, BorderLayout.SOUTH);
        p.add(center, BorderLayout.CENTER);

        // right panel: show issues
        DefaultTableModel allIssuesModel = new DefaultTableModel(new Object[]{"IssueID","BookTitle","Student","IssueDate","DueDate","Returned","Fine"},0);
        JTable allIssuesTable = new JTable(allIssuesModel);
        p.add(new JScrollPane(allIssuesTable), BorderLayout.EAST);

        // action listeners
        addBookBtn.addActionListener(e -> {
            String t = titleField.getText().trim();
            String a = authorField.getText().trim();
            if (t.isEmpty() || a.isEmpty()) {
                JOptionPane.showMessageDialog(this,"Fill title & author");
                return;
            }
            addBook(t,a);
            titleField.setText(""); authorField.setText("");
            loadAdminBooks(adminBooksModel);
        });

        viewAllBtn.addActionListener(e -> loadAdminBooks(adminBooksModel));
        deleteBookBtn.addActionListener(e -> {
            int row = adminBooksTable.getSelectedRow();
            if (row == -1) { JOptionPane.showMessageDialog(this,"Select a book"); return; }
            int id = (int) adminBooksModel.getValueAt(row,0);
            deleteBook(id);
            loadAdminBooks(adminBooksModel);
        });

        viewAllIssuesBtn.addActionListener(e -> loadAllIssues(allIssuesModel));

        // initial load
        loadAdminBooks(adminBooksModel);

        return p;
    }

    // -------------------------
    // Auth & registration
    // -------------------------
    private void performLogin() {
        String user = loginUserField.getText().trim();
        String pass = new String(loginPassField.getPassword());

        if (user.equals(ADMIN_USER) && pass.equals(ADMIN_PASS)) {
            adminWelcomeLabel.setText("Admin Dashboard (" + ADMIN_USER + ")");
            cards.show(mainPanel, "adminDash");
            return;
        }

        // student login by roll_no + password
        try {
            PreparedStatement ps = conn.prepareStatement("SELECT id, name FROM students WHERE roll_no = ? AND password = ?");
            ps.setString(1, user);
            ps.setString(2, pass);
            ResultSet rs = ps.executeQuery();
            if (rs.next()) {
                currentStudentId = rs.getInt("id");
                currentStudentName = rs.getString("name");
                studentWelcomeLabel.setText("Welcome, " + currentStudentName);
                loadStudentIssues();
                loadBooks("");
                cards.show(mainPanel, "studentDash");
            } else {
                JOptionPane.showMessageDialog(this, "Invalid credentials! Or register as student.");
            }
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, "Login error: " + ex.getMessage());
        }
    }

    private void performRegistration() {
        String roll = regRollField.getText().trim();
        String name = regNameField.getText().trim();
        String pass = new String(regPassField.getPassword());
        if (roll.isEmpty() || name.isEmpty() || pass.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Fill all fields");
            return;
        }
        try {
            PreparedStatement ps = conn.prepareStatement("INSERT INTO students (roll_no, name, password) VALUES (?, ?, ?)");
            ps.setString(1, roll);
            ps.setString(2, name);
            ps.setString(3, pass);
            ps.executeUpdate();
            JOptionPane.showMessageDialog(this, "Registered! Please login.");
            regRollField.setText(""); regNameField.setText(""); regPassField.setText("");
            cards.show(mainPanel, "login");
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, "Registration error: " + ex.getMessage());
        }
    }

    // -------------------------
    // Book operations
    // -------------------------
    private void loadBooks(String titleKeyword) {
        if (booksTableModel == null) return; // safety
        booksTableModel.setRowCount(0);
        try {
            String sql = "SELECT * FROM books";
            if (titleKeyword != null && !titleKeyword.isEmpty()) {
                sql += " WHERE title LIKE ?";
            }
            PreparedStatement ps = conn.prepareStatement(sql);
            if (titleKeyword != null && !titleKeyword.isEmpty()) {
                ps.setString(1, "%" + titleKeyword + "%");
            }
            ResultSet rs = ps.executeQuery();
            while (rs.next()) {
                booksTableModel.addRow(new Object[]{
                        rs.getInt("id"),
                        rs.getString("title"),
                        rs.getString("author"),
                        rs.getBoolean("available") ? "Available" : "Issued"
                });
            }
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, "Load books error: " + ex.getMessage());
        }
    }

    private void addBook(String title, String author) {
        try {
            PreparedStatement ps = conn.prepareStatement("INSERT INTO books (title, author, available) VALUES (?, ?, true)");
            ps.setString(1, title);
            ps.setString(2, author);
            ps.executeUpdate();
            JOptionPane.showMessageDialog(this, "Book added!");
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, "Add book failed: " + ex.getMessage());
        }
    }

    private void deleteBook(int bookId) {
        // safer: only delete when not issued
        try {
            // check
            PreparedStatement check = conn.prepareStatement("SELECT COUNT(*) AS c FROM issues WHERE book_id = ? AND returned = false");
            check.setInt(1, bookId);
            ResultSet cr = check.executeQuery();
            if (cr.next() && cr.getInt("c") > 0) {
                JOptionPane.showMessageDialog(this, "Cannot delete: Book currently issued.");
                return;
            }
            PreparedStatement ps = conn.prepareStatement("DELETE FROM books WHERE id = ?");
            ps.setInt(1, bookId);
            ps.executeUpdate();
            JOptionPane.showMessageDialog(this, "Book deleted.");
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, "Delete failed: " + ex.getMessage());
        }
    }

    // -------------------------
    // Student issue & return
    // -------------------------
    private void studentIssueSelectedBook() {
        int row = booksTable.getSelectedRow();
        if (row == -1) { JOptionPane.showMessageDialog(this, "Select a book to issue"); return; }
        int bookId = (int) booksTableModel.getValueAt(row, 0);
        String status = (String) booksTableModel.getValueAt(row, 3);
        if (!"Available".equals(status)) { JOptionPane.showMessageDialog(this, "Selected book not available"); return; }
        // issue: create row in issues, set book available=false, issue_date=now, due_date=now+14
        try {
            LocalDate issueDate = LocalDate.now();
            LocalDate dueDate = issueDate.plusDays(14);
            PreparedStatement ps = conn.prepareStatement("INSERT INTO issues (book_id, student_id, issue_date, due_date, returned, fine) VALUES (?, ?, ?, ?, ?, ?)");
            ps.setInt(1, bookId);
            ps.setInt(2, currentStudentId);
            ps.setDate(3, Date.valueOf(issueDate));
            ps.setDate(4, Date.valueOf(dueDate));
            ps.setBoolean(5, false);
            ps.setDouble(6, 0.0);
            ps.executeUpdate();

            PreparedStatement upd = conn.prepareStatement("UPDATE books SET available = false WHERE id = ?");
            upd.setInt(1, bookId);
            upd.executeUpdate();

            JOptionPane.showMessageDialog(this, "Book issued! Due: " + dueDate.toString());
            loadBooks("");
            loadStudentIssues();
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, "Issue failed: " + ex.getMessage());
        }
    }

    private void studentReturnSelectedIssue() {
        int row = issuesTable.getSelectedRow();
        if (row == -1) { JOptionPane.showMessageDialog(this, "Select an issued record to return"); return; }
        int issueId = (int) issuesTableModel.getValueAt(row, 0);
        try {
            // fetch issue row
            PreparedStatement ps = conn.prepareStatement("SELECT book_id, issue_date, due_date, returned FROM issues WHERE id = ?");
            ps.setInt(1, issueId);
            ResultSet rs = ps.executeQuery();
            if (!rs.next()) { JOptionPane.showMessageDialog(this, "Issue record not found"); return; }
            boolean returned = rs.getBoolean("returned");
            if (returned) { JOptionPane.showMessageDialog(this, "Already returned"); return; }
            int bookId = rs.getInt("book_id");
            LocalDate dueDate = rs.getDate("due_date").toLocalDate();
            LocalDate returnDate = LocalDate.now();

            long overdueDays = ChronoUnit.DAYS.between(dueDate, returnDate);
            double fine = 0.0;
            if (overdueDays > 0) fine = overdueDays * FINE_PER_DAY;

            // update issues: set returned=true, return_date, fine
            PreparedStatement upd = conn.prepareStatement("UPDATE issues SET returned = true, return_date = ?, fine = ? WHERE id = ?");
            upd.setDate(1, Date.valueOf(returnDate));
            upd.setDouble(2, fine);
            upd.setInt(3, issueId);
            upd.executeUpdate();

            // make book available
            PreparedStatement updBook = conn.prepareStatement("UPDATE books SET available = true WHERE id = ?");
            updBook.setInt(1, bookId);
            updBook.executeUpdate();

            String msg = "Book returned. ";
            if (fine > 0) msg += "Fine due: â‚¹" + fine;
            else msg += "No fine.";
            JOptionPane.showMessageDialog(this, msg);

            loadBooks("");
            loadStudentIssues();
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, "Return failed: " + ex.getMessage());
        }
    }

    // -------------------------
    // Load student's issues
    // -------------------------
    private void loadStudentIssues() {
        if (currentStudentId == -1) return;
        issuesTableModel.setRowCount(0);
        try {
            PreparedStatement ps = conn.prepareStatement(
                    "SELECT i.id, b.title, i.issue_date, i.due_date, i.returned, i.fine " +
                    "FROM issues i JOIN books b ON i.book_id = b.id WHERE i.student_id = ?");
            ps.setInt(1, currentStudentId);
            ResultSet rs = ps.executeQuery();
            while (rs.next()) {
                issuesTableModel.addRow(new Object[]{
                        rs.getInt(1),
                        rs.getString(2),
                        rs.getDate(3),
                        rs.getDate(4),
                        rs.getBoolean(5),
                        rs.getDouble(6)
                });
            }
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, "Load issues error: " + ex.getMessage());
        }
    }

    // -------------------------
    // Admin helpers
    // -------------------------
    private void loadAdminBooks(DefaultTableModel model) {
        model.setRowCount(0);
        try {
            Statement st = conn.createStatement();
            ResultSet rs = st.executeQuery("SELECT * FROM books");
            while (rs.next()) {
                model.addRow(new Object[]{
                        rs.getInt("id"),
                        rs.getString("title"),
                        rs.getString("author"),
                        rs.getBoolean("available") ? "Available" : "Issued"
                });
            }
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this,"Load admin books error: " + ex.getMessage());
        }
    }

    private void loadAllIssues(DefaultTableModel model) {
        model.setRowCount(0);
        try {
            Statement st = conn.createStatement();
            ResultSet rs = st.executeQuery(
                    "SELECT i.id, b.title, s.name, i.issue_date, i.due_date, i.returned, i.fine " +
                    "FROM issues i JOIN books b ON i.book_id = b.id JOIN students s ON i.student_id = s.id");
            while (rs.next()) {
                model.addRow(new Object[]{
                        rs.getInt(1),
                        rs.getString(2),
                        rs.getString(3),
                        rs.getDate(4),
                        rs.getDate(5),
                        rs.getBoolean(6),
                        rs.getDouble(7)
                });
            }
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this,"Load all issues error: " + ex.getMessage());
        }
    }

    // -------------------------
    // Utility
    // -------------------------
    private void showErrorAndExit(String msg) {
        JOptionPane.showMessageDialog(this, msg);
        System.exit(1);
    }

    // -------------------------
    // Main
    // -------------------------
    public static void main(String[] args) {
        SwingUtilities.invokeLater(LibrarySystemWithLogin::new);
    }
}
