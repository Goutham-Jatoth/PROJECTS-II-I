üóíÔ∏è Project Title: Notes and Password Manager
üß† Abstract

The app allows a user to:

Create an account and log in securely

Add, edit, delete notes

Store tasks or notes in a centralized MySQL database

Manage daily tasks and prioritize them

Keep the data private with authentication

üß∞ Technologies Required
Component	Technology
Programming Language	Java
GUI Framework	Swing
Database	MySQL
IDE	VS Code / Eclipse / IntelliJ
üìÇ Project Structure
NotesPasswordManager/
‚îú‚îÄ‚îÄ src/
‚îÇ   ‚îú‚îÄ‚îÄ DBConnection.java
‚îÇ   ‚îú‚îÄ‚îÄ User.java
‚îÇ   ‚îú‚îÄ‚îÄ LoginFrame.java
‚îÇ   ‚îú‚îÄ‚îÄ RegisterFrame.java
‚îÇ   ‚îú‚îÄ‚îÄ NoteManagerFrame.java

‚öôÔ∏è 1. DBConnection.java
import java.sql.*;

public class DBConnection {
    private static Connection conn;

    public static Connection getConnection() {
        try {
            if (conn == null || conn.isClosed()) {
                Class.forName("com.mysql.cj.jdbc.Driver");
                conn = DriverManager.getConnection(
                    "jdbc:mysql://localhost:3306/notemanagerdb","root","yourpassword");
            }
        } catch(Exception e) {
            e.printStackTrace();
        }
        return conn;
    }
}

üíª 2. User.java
public class User {
    private String username;
    private String password;

    public User(String username, String password) {
        this.username = username;
        this.password = password;
    }

    public String getUsername() { return username; }
    public String getPassword() { return password; }
}

üíª 3. LoginFrame.java
import javax.swing.*;
import java.awt.*;
import java.awt.event.*;
import java.sql.*;

public class LoginFrame extends JFrame implements ActionListener {
    private JTextField usernameField;
    private JPasswordField passwordField;
    private JButton loginBtn, registerBtn;

    public LoginFrame() {
        setTitle("Notes and Password Manager - Login");
        setSize(400,250);
        setLayout(new GridLayout(4,2,10,10));
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setLocationRelativeTo(null);

        add(new JLabel("Username:"));
        usernameField = new JTextField();
        add(usernameField);

        add(new JLabel("Password:"));
        passwordField = new JPasswordField();
        add(passwordField);

        loginBtn = new JButton("Login");
        registerBtn = new JButton("Register");
        loginBtn.addActionListener(this);
        registerBtn.addActionListener(this);

        add(loginBtn);
        add(registerBtn);
    }

    @Override
    public void actionPerformed(ActionEvent e) {
        if(e.getSource() == loginBtn) {
            String username = usernameField.getText();
            String password = new String(passwordField.getPassword());

            try {
                Connection con = DBConnection.getConnection();
                PreparedStatement ps = con.prepareStatement(
                    "SELECT * FROM users WHERE username=? AND password=?");
                ps.setString(1, username);
                ps.setString(2, password);
                ResultSet rs = ps.executeQuery();

                if(rs.next()) {
                    JOptionPane.showMessageDialog(this,"Login successful!");
                    new NoteManagerFrame(username).setVisible(true);
                    this.dispose();
                } else {
                    JOptionPane.showMessageDialog(this,"Invalid credentials!");
                }
            } catch(Exception ex) {
                ex.printStackTrace();
            }
        } else if(e.getSource() == registerBtn) {
            new RegisterFrame().setVisible(true);
            this.dispose();
        }
    }

    public static void main(String[] args) {
        SwingUtilities.invokeLater(() -> new LoginFrame().setVisible(true));
    }
}

üíª 4. RegisterFrame.java
import javax.swing.*;
import java.awt.*;
import java.awt.event.*;
import java.sql.*;

public class RegisterFrame extends JFrame implements ActionListener {
    private JTextField usernameField;
    private JPasswordField passwordField;
    private JButton registerBtn;

    public RegisterFrame() {
        setTitle("Register");
        setSize(400,200);
        setLayout(new GridLayout(3,2,10,10));
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setLocationRelativeTo(null);

        add(new JLabel("Username:"));
        usernameField = new JTextField();
        add(usernameField);

        add(new JLabel("Password:"));
        passwordField = new JPasswordField();
        add(passwordField);

        registerBtn = new JButton("Register");
        registerBtn.addActionListener(this);
        add(new JLabel());
        add(registerBtn);
    }

    @Override
    public void actionPerformed(ActionEvent e) {
        String username = usernameField.getText();
        String password = new String(passwordField.getPassword());

        try {
            Connection con = DBConnection.getConnection();
            PreparedStatement ps = con.prepareStatement(
                "INSERT INTO users(username,password) VALUES(?,?)");
            ps.setString(1, username);
            ps.setString(2, password);
            ps.executeUpdate();

            JOptionPane.showMessageDialog(this,"Registration successful! Please login.");
            new LoginFrame().setVisible(true);
            this.dispose();
        } catch(Exception ex) {
            ex.printStackTrace();
        }
    }
}

üíª 5. NoteManagerFrame.java
import javax.swing.*;
import java.awt.*;
import java.awt.event.*;
import java.sql.*;

public class NoteManagerFrame extends JFrame implements ActionListener {
    private String username;
    private JTextArea noteArea;
    private JButton saveBtn, logoutBtn;

    public NoteManagerFrame(String username) {
        this.username = username;
        setTitle("Notes Manager - " + username);
        setSize(500,400);
        setLayout(new BorderLayout());
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setLocationRelativeTo(null);

        noteArea = new JTextArea();
        add(new JScrollPane(noteArea), BorderLayout.CENTER);

        JPanel bottomPanel = new JPanel();
        saveBtn = new JButton("Save Note");
        logoutBtn = new JButton("Logout");
        saveBtn.addActionListener(this);
        logoutBtn.addActionListener(this);
        bottomPanel.add(saveBtn);
        bottomPanel.add(logoutBtn);
        add(bottomPanel, BorderLayout.SOUTH);

        loadNote();
    }

    private void loadNote() {
        try {
            Connection con = DBConnection.getConnection();
            PreparedStatement ps = con.prepareStatement(
                "SELECT note FROM notes WHERE username=?");
            ps.setString(1, username);
            ResultSet rs = ps.executeQuery();
            if(rs.next()) {
                noteArea.setText(rs.getString("note"));
            }
        } catch(Exception e) {
            e.printStackTrace();
        }
    }

    @Override
    public void actionPerformed(ActionEvent e) {
        if(e.getSource() == saveBtn) {
            try {
                Connection con = DBConnection.getConnection();
                PreparedStatement ps = con.prepareStatement(
                    "REPLACE INTO notes(username,note) VALUES(?,?)");
                ps.setString(1, username);
                ps.setString(2, noteArea.getText());
                ps.executeUpdate();
                JOptionPane.showMessageDialog(this,"Note saved successfully!");
            } catch(Exception ex) {
                ex.printStackTrace();
            }
        } else if(e.getSource() == logoutBtn) {
            new LoginFrame().setVisible(true);
            this.dispose();
        }
    }
}

üóÑÔ∏è MySQL Database Setup
CREATE DATABASE notemanagerdb;
USE notemanagerdb;

CREATE TABLE users (
    id INT AUTO_INCREMENT PRIMARY KEY,
    username VARCHAR(50) UNIQUE,
    password VARCHAR(50)
);

CREATE TABLE notes (
    id INT AUTO_INCREMENT PRIMARY KEY,
    username VARCHAR(50),
    note TEXT,
    UNIQUE(username)
);

üß© Features

‚úÖ User registration & login
‚úÖ Add, edit, save notes
‚úÖ Logout functionality
‚úÖ Centralized MySQL database storage
‚úÖ GUI using Java Swing

‚öôÔ∏è How to Run

Install MySQL and create the database.

Add MySQL Connector JAR to project libraries.

Run LoginFrame.java in VS Code.

Users can register, login, and manage notes.

This project can be enhanced to include:

üîí Password encryption

üóÇÔ∏è Multiple notes per user

‚è∞ Due dates / Reminders

üìä Task priority and search
