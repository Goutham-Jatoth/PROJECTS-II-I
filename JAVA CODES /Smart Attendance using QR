import com.google.zxing.*;
import com.google.zxing.client.j2se.MatrixToImageWriter;
import com.google.zxing.common.*;
import com.google.zxing.qrcode.QRCodeWriter;

import org.opencv.core.*;
import org.opencv.videoio.VideoCapture;
import org.opencv.imgcodecs.Imgcodecs;

import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import java.awt.*;
import java.awt.event.*;
import java.io.*;
import java.nio.file.*;
import java.text.SimpleDateFormat;
import java.util.*;
import java.util.List;

class Student implements Serializable {
    String name, rollNo, qrCodePath;
    Map<String, Boolean> attendance; // date -> present/absent

    Student(String name, String rollNo) {
        this.name = name;
        this.rollNo = rollNo;
        this.qrCodePath = "QRCodes/" + rollNo + ".png";
        attendance = new HashMap<>();
    }
}

public class SmartAttendanceUltimate extends JFrame {
    static { System.loadLibrary(Core.NATIVE_LIBRARY_NAME); }

    private ArrayList<Student> students;
    private final String FILE_NAME = "students.dat";
    private JTable attendanceTable;
    private DefaultTableModel tableModel;

    public SmartAttendanceUltimate() {
        students = new ArrayList<>();
        loadStudents();

        setTitle("Ultimate Smart Attendance");
        setSize(900, 500);
        setDefaultCloseOperation(EXIT_ON_CLOSE);
        setLocationRelativeTo(null);
        setLayout(new BorderLayout());

        // Top panel - Add student
        JPanel topPanel = new JPanel();
        JTextField nameField = new JTextField(10);
        JTextField rollField = new JTextField(10);
        JButton addBtn = new JButton("Add Student");
        topPanel.add(new JLabel("Name:")); topPanel.add(nameField);
        topPanel.add(new JLabel("Roll No:")); topPanel.add(rollField);
        topPanel.add(addBtn);
        add(topPanel, BorderLayout.NORTH);

        // Center panel - Attendance table
        tableModel = new DefaultTableModel(new String[]{"Roll No","Name","Today Present"},0);
        attendanceTable = new JTable(tableModel);
        refreshTable();
        add(new JScrollPane(attendanceTable), BorderLayout.CENTER);

        // Bottom panel - QR scan & export
        JPanel bottomPanel = new JPanel();
        JButton scanBtn = new JButton("Scan QR via Camera");
        JButton exportBtn = new JButton("Export Attendance CSV");
        bottomPanel.add(scanBtn); bottomPanel.add(exportBtn);
        add(bottomPanel, BorderLayout.SOUTH);

        // Button actions
        addBtn.addActionListener(e -> {
            try {
                String name = nameField.getText().trim();
                String roll = rollField.getText().trim();
                if(name.isEmpty() || roll.isEmpty()) { JOptionPane.showMessageDialog(this,"Fill all fields!"); return; }
                Student s = new Student(name, roll);
                generateQRCode(roll, s.qrCodePath);
                students.add(s);
                saveStudents();
                JOptionPane.showMessageDialog(this,"Student added and QR saved at "+s.qrCodePath);
                nameField.setText(""); rollField.setText("");
                refreshTable();
            } catch(Exception ex){ ex.printStackTrace(); }
        });

        scanBtn.addActionListener(e -> scanQRCodeCamera());

        exportBtn.addActionListener(e -> {
            try { exportCSV(); JOptionPane.showMessageDialog(this,"CSV exported!"); } 
            catch(Exception ex){ ex.printStackTrace(); }
        });
    }

    // Generate QR code
    private void generateQRCode(String data, String path) throws Exception {
        Path p = Paths.get(path);
        Files.createDirectories(p.getParent());
        BitMatrix matrix = new QRCodeWriter().encode(data, BarcodeFormat.QR_CODE,200,200);
        MatrixToImageWriter.writeToPath(matrix,"PNG",p);
    }

    // Refresh table
    private void refreshTable() {
        String today = new SimpleDateFormat("yyyy-MM-dd").format(new Date());
        tableModel.setRowCount(0);
        for(Student s : students){
            boolean present = s.attendance.getOrDefault(today,false);
            tableModel.addRow(new Object[]{s.rollNo, s.name, present?"Yes":"No"});
        }
    }

    // Scan QR using camera
    private void scanQRCodeCamera() {
        VideoCapture cap = new VideoCapture(0);
        if(!cap.isOpened()){ JOptionPane.showMessageDialog(this,"Camera not found!"); return; }

        Mat frame = new Mat();
        JOptionPane.showMessageDialog(this,"Press OK to capture QR from camera");
        cap.read(frame);
        String filename = "tempQR.png";
        Imgcodecs.imwrite(filename, frame);
        cap.release();

        try {
            String decoded = decodeQRCode(filename);
            new File(filename).delete();
            if(decoded==null){ JOptionPane.showMessageDialog(this,"No QR detected!"); return; }
            markAttendance(decoded);
        } catch(Exception e){ e.printStackTrace(); }
    }

    // Decode QR from image
    private String decodeQRCode(String filePath) throws Exception {
        BufferedImage img = javax.imageio.ImageIO.read(new File(filePath));
        LuminanceSource source = new com.google.zxing.client.j2se.BufferedImageLuminanceSource(img);
        BinaryBitmap bitmap = new BinaryBitmap(new HybridBinarizer(source));
        Result result = new MultiFormatReader().decode(bitmap);
        return result.getText();
    }

    // Mark attendance for roll number
    private void markAttendance(String roll) {
        String today = new SimpleDateFormat("yyyy-MM-dd").format(new Date());
        boolean found=false;
        for(Student s : students){
            if(s.rollNo.equals(roll)){
                s.attendance.put(today,true);
                found=true;
                JOptionPane.showMessageDialog(this,"Attendance marked for "+s.name);
                break;
            }
        }
        if(!found) JOptionPane.showMessageDialog(this,"Invalid QR!");
        refreshTable();
        try{ saveStudents(); } catch(Exception e){ e.printStackTrace(); }
    }

    // Export CSV
    private void exportCSV() throws Exception {
        StringBuilder sb = new StringBuilder();
        Set<String> dates = new HashSet<>();
        for(Student s : students) dates.addAll(s.attendance.keySet());
        List<String> sortedDates = new ArrayList<>(dates); Collections.sort(sortedDates);

        sb.append("RollNo,Name");
        for(String d : sortedDates) sb.append(",").append(d);
        sb.append("\n");

        for(Student s : students){
            sb.append(s.rollNo).append(",").append(s.name);
            for(String d : sortedDates) sb.append(",").append(s.attendance.getOrDefault(d,false)?"Yes":"No");
            sb.append("\n");
        }

        Files.write(Paths.get("attendance.csv"), sb.toString().getBytes());
    }

    // Save students
    private void saveStudents() throws Exception {
        ObjectOutputStream oos = new ObjectOutputStream(new FileOutputStream(FILE_NAME));
        oos.writeObject(students);
        oos.close();
    }

    // Load students
    private void loadStudents() {
        try{
            ObjectInputStream ois = new ObjectInputStream(new FileInputStream(FILE_NAME));
            students = (ArrayList<Student>) ois.readObject();
            ois.close();
        }catch(Exception e){ students=new ArrayList<>(); }
    }

    public static void main(String[] args) {
        SwingUtilities.invokeLater(() -> new SmartAttendanceUltimate().setVisible(true));
    }
}
























Perfect! Let’s make the ultimate Smart Attendance System with:

Camera QR scanning (real-time)

Date-wise attendance logging

Persistent storage in files

GUI interface with Swing

Attendance report exportable to CSV/Excel

We’ll use:

ZXing → for QR decoding and encoding

OpenCV → for camera capture

Java Swing → for GUI

Step 1: Setup Libraries

ZXing core jar → Download

ZXing javase jar → Download

OpenCV Java → Download
 and add opencv-4.x.jar to project, plus native .dll or .so file in path.

Step 2: Project Structure
SmartAttendance/
 ├─ src/
 │   └─ SmartAttendanceUltimate.java
 ├─ QRCodes/
 ├─ attendance.csv
 └─ students.dat
