Project Name: Secure Your Password (Password Manager)
🎯 Features

✅ Store passwords safely (encrypted)
✅ View saved passwords (only after entering master password)
✅ Generate strong random passwords
✅ Delete accounts/passwords
✅ Save everything in a local JSON file







📦 Requirements

Install one dependency for encryption:

pip install cryptography









"""
Secure Your Password - A simple password manager with encryption.
---------------------------------------------------------------
Features:
- Add new passwords securely (encrypted)
- View saved passwords (after master password verification)
- Generate strong random passwords
- Delete saved accounts
"""

import os
import json
import base64
import getpass
import random
import string
from cryptography.fernet import Fernet

DATA_FILE = "passwords.json"
KEY_FILE = "secret.key"


# ---------------------- Encryption Utilities ----------------------

def generate_key():
    """Generate encryption key if not exists."""
    if not os.path.exists(KEY_FILE):
        key = Fernet.generate_key()
        with open(KEY_FILE, "wb") as f:
            f.write(key)


def load_key():
    """Load encryption key from file."""
    with open(KEY_FILE, "rb") as f:
        return f.read()


def encrypt_text(text, key):
    """Encrypt text using key."""
    f = Fernet(key)
    return f.encrypt(text.encode()).decode()


def decrypt_text(ciphertext, key):
    """Decrypt encrypted text."""
    f = Fernet(key)
    return f.decrypt(ciphertext.encode()).decode()


# ---------------------- Data Management ----------------------

def load_passwords():
    """Load passwords from JSON file."""
    if not os.path.exists(DATA_FILE):
        return []
    try:
        with open(DATA_FILE, "r", encoding="utf-8") as f:
            return json.load(f)
    except Exception:
        return []


def save_passwords(passwords):
    """Save all passwords to JSON file."""
    with open(DATA_FILE, "w", encoding="utf-8") as f:
        json.dump(passwords, f, ensure_ascii=False, indent=2)


# ---------------------- Password Generation ----------------------

def generate_strong_password(length=12):
    """Generate a strong random password."""
    chars = string.ascii_letters + string.digits + string.punctuation
    password = ''.join(random.choice(chars) for _ in range(length))
    return password


# ---------------------- Core Operations ----------------------

def add_password(master_key):
    passwords = load_passwords()
    account = input("Enter account name (e.g., Gmail, Instagram): ").strip()
    username = input("Enter username or email: ").strip()
    password = getpass.getpass("Enter password (or leave blank to generate): ").strip()
    if not password:
        password = generate_strong_password()
        print(f"🔑 Generated password: {password}")

    encrypted = encrypt_text(password, master_key)
    passwords.append({"account": account, "username": username, "password": encrypted})
    save_passwords(passwords)
    print("✅ Password saved securely!")


def view_passwords(master_key):
    passwords = load_passwords()
    if not passwords:
        print("📭 No saved passwords found.")
        return

    print("\n🔐 Saved Passwords:")
    print("-" * 60)
    for idx, entry in enumerate(passwords, 1):
        decrypted = decrypt_text(entry["password"], master_key)
        print(f"{idx}. {entry['account']}")
        print(f"   👤 {entry['username']}")
        print(f"   🔑 {decrypted}")
        print("-" * 60)


def delete_password():
    passwords = load_passwords()
    if not passwords:
        print("No passwords to delete.")
        return

    print("\nAccounts:")
    for i, entry in enumerate(passwords, 1):
        print(f"{i}. {entry['account']}")
    try:
        choice = int(input("Enter the number to delete: "))
        if 1 <= choice <= len(passwords):
            removed = passwords.pop(choice - 1)
            save_passwords(passwords)
            print(f"🗑️ Deleted {removed['account']} successfully.")
        else:
            print("❌ Invalid selection.")
    except ValueError:
        print("❌ Please enter a valid number.")


# ---------------------- Main Menu ----------------------

def main_menu():
    print("🔒 Welcome to Secure Your Password 🔒")

    # Step 1: Ensure encryption key exists
    generate_key()
    key = load_key()

    # Step 2: Master password setup
    master_pass_file = "master.txt"
    if not os.path.exists(master_pass_file):
        print("🛠️ First-time setup: Create a master password.")
        mp = getpass.getpass("Set your master password: ").strip()
        with open(master_pass_file, "w") as f:
            f.write(base64.b64encode(mp.encode()).decode())
        print("✅ Master password created. Restart app to continue.")
        return

    # Step 3: Verify master password
    with open(master_pass_file, "r") as f:
        saved_hash = base64.b64decode(f.read()).decode()

    mp_entered = getpass.getpass("Enter master password: ").strip()
    if mp_entered != saved_hash:
        print("❌ Incorrect master password! Access denied.")
        return

    while True:
        print("\n===== SECURE YOUR PASSWORD =====")
        print("1️⃣  Add New Password")
        print("2️⃣  View Saved Passwords")
        print("3️⃣  Generate Strong Password")
        print("4️⃣  Delete a Password")
        print("0️⃣  Exit")

        choice = input("Enter your choice: ").strip()

        if choice == "1":
            add_password(key)
        elif choice == "2":
            view_passwords(key)
        elif choice == "3":
            length = input("Enter desired password length (default 12): ").strip()
            length = int(length) if length.isdigit() else 12
            print(f"✅ Strong password: {generate_strong_password(length)}")
        elif choice == "4":
            delete_password()
        elif choice == "0":
            print("👋 Goodbye, stay safe!")
            break
        else:
            print("❌ Invalid choice, please try again.")


if __name__ == "__main__":
    try:
        main_menu()
    except KeyboardInterrupt:
        print("\n🚪 Exiting gracefully...")

















💡 How It Works

On first run, you’ll set a master password (used for authentication).

Each new password is encrypted using the Fernet encryption algorithm.

Data is saved in passwords.json (encrypted form).

To see or manage saved passwords, you must enter the master password.

It also includes a strong password generator feature.









🔒 Welcome to Secure Your Password 🔒
Enter master password: ********

===== SECURE YOUR PASSWORD =====
1️⃣  Add New Password
2️⃣  View Saved Passwords
3️⃣  Generate Strong Password
4️⃣  Delete a Password
0️⃣  Exit
Enter your choice: 1
Enter account name (e.g., Gmail, Instagram): Gmail
Enter username or email: johndoe@gmail.com
Enter password (or leave blank to generate):
🔑 Generated password: gP!7xC@vL9t#
✅ Password saved securely!







Enter your choice: 2
🔐 Saved Passwords:
1. Gmail
   👤 johndoe@gmail.com
   🔑 gP!7xC@vL9t#
